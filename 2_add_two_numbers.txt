给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807






/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		ListNode* preHead(0),*p=&preHead;
		int carry=0;
		while(l1||l2||carry)
		{
			int Sum=(l1?l1->val)+(l2?l2->val）+carry;
			carry =Sum/10;
			p->next=new ListNode(Sum%10);//
			p=p->next;
			l1=l1?l1->next:l1；//若为空，保持空，否则依次遍历节点
			l2=l2?l2->next:l2;
		
		
		
		}
		return preHead->next;
		
	
	
	
	
	 }
};